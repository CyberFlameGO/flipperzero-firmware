name: 'Analyze .map file with Amap'

on:
  push:
    branches:
      - dev
      - "release*"
    tags:
      - '*'
  pull_request:

env:
  TARGETS: f7

jobs:
  amap_analyse:
    runs-on: [self-hosted,FlipperZeroMacShell]
    steps:
      - name: 'Decontaminate previous build leftovers'
        run: |
          if [ -d .git ]; then
            git submodule status \
              || git checkout `git rev-list --max-parents=0 HEAD | tail -n 1`
          fi

      - name: 'Checkout code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'Build the firmware'
        run: SET_GH_OUTPUT=1 FBT_TOOLCHAIN_PATH=/opt ./fbt

      - name: 'Make artifacts directory'
        run: |
          rm -rf artifacts
          mkdir artifacts

      - name: 'Make amap report'
        run: |
          cp build/latest/firmware.elf.map artifacts/
          cd artifacts/
          /Applications/amap/Contents/MacOS/amap -f firmware.elf.map

      - name: 'Upload report to database'
        run: |
          get_size()
          {
            SECTION="$1";
            /opt/toolchain/x86_64-darwin/bin/arm-none-eabi-size \
              -A build/latest/firmware.elf \
              | grep "^$SECTION" | awk '{print $2}'
          }
          export REF="${{github.ref}}"
          export COMMIT_HASH="$(git rev-parse HEAD)"
          export COMMIT_MSG="${{github.event.head_commit.message}}"
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            export PULL_ID="${{github.event.pull_request.number}}"
            export PULL_NAME="${{github.event.pull_request.title}}"
            export REF="${{github.head_ref}}"
            export COMMIT_HASH="$(git log -1 --pretty=oneline | awk '{print $1}')"
            export COMMIT_MSG="$(git log -1 --pretty=format:"%s")"
          fi
          export BRANCH_NAME="${REF#refs/*/}"
          export BSS_SIZE="$(get_size ".bss")"
          export TEXT_SIZE="$(get_size ".text")"
          export RODATA_SIZE="$(get_size ".rodata")"
          export DATA_SIZE="$(get_size ".data")"
          export FREE_FLASH_SIZE="$(get_size ".free_flash")"
          /usr/local/bin/amap_mariadb_insert.py artifacts/firmware.elf.map.all
